一  Java设计模式
   单例 工厂 适配器 
   
   
   
   二 工厂模式的原理
      简单工厂方法（静态）：  有两个对象A  和B  
       通过传入的参数判断要返回A还是B的实例
      工厂方法: 定义一个用于创建对象的接口，让子类决定实例化哪一个类
       例如 抽象方法为 car  ,两个子类为  Bmd   Qq
       Car car=new Bmw(); 
       抽象的工厂 ：提供一个创建一系列的相关的或者依赖的对象的接口，无需指定它们的具体实现类，具体的时间分别在子类工厂中产生。
       
   
   三  Springboot和Springcold的区别
    Springboot :  精简配置,
    1. 创建独立的Spring应用程序
    2. 内嵌式web服务器 tomcat jetty
    3. 简化Maven配置
    4. 自动配置Spring    
    
    SpringBoot专注于快速方便的开发单个个体微服务。
    SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，
    为各个服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、精选决策、分布式会话等集成服务。
    SpringBoot可以离开SpringCloud独立开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系。
    SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。
    
   
   四  如何集成2个系统
      第一种:通过远程调用关联，A系统开放接口，B发送请求调用这个接口得到返回值
       缺点：不够灵活，A的地址可能会变化，B也需要跟着改，或者A是集群式系统，B不知该调用是哪个
      第二种：可以利用SpringCloud来实现分布式系统，通过注册中心eureka对服务进行注册，feign
               
   五 Java缓存
      如果某些资源或者数据会被频繁的使用，而这些资源或数据存储在系统外部，比如数据库、硬盘文件等，那么每次操作这些数据的时候都从数据库或者硬盘上去获取，速度会很慢，会造成性能问题。
      一个简单的解决方法就是：把这些数据缓存到内存里面，每次操作的时候，先到内存里面找，看有没有这些数据，如果有，那么就直接使用，如果没有那么就获取它，并设置到缓存中，下一次访问的时候就可以直接从内存中获取了。从而节省大量的时间
      
      redis缓存
   
   六 Springboot是怎么配制的 
      在pom.xml中添加依赖，通过配置出所需要的工具包
      在application.properties或者yml文件中配置参数
      
   
   七  微服务相关的内容
       1 一些列微笑的服务共同构成
       2各种跑在自己的进程里，不共享主内存
       3每个服务为独立的业务而开发
       4独立部署
       5分布式的管理
   
   八  Activity
        当第一次发送请求给servlet，servlet容器会创建一个实例，调用init方法进行初始化，然后处于响应请求状态，接到请求后，调用sercice方法处理请求（根据不同请求执行get、post方法）
        当servlet容器关闭后，servlet调用destory（）方法进行销毁，释放资源
        
   九  什么是Java的序列化     
   
   十  js中的闭包是什么
   
   十一  map是怎么实现的
       链表散列”的数据结构，即数组和链表的结合体
       Map接口是java定义的一种键值对映射的数据结构接口，其实现方式有四种：HashMap,LinkedHashMap,Hashtable,TreeMap。　
       Hashmap 速度快，不安全  LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.
       Hashtable: 线程安全
       TreeMap：

　　TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。
   
        